"use strict";
const React = require('react');
const Card_1 = require('material-ui/Card');
let content = React.createElement("div", null, React.createElement(Card_1.Card, null, React.createElement(Card_1.CardText, null, "The best way to become familiar with the explorer is to ", React.createElement("span", {style: { fontStyle: 'italic' }}, "play with it"), " (experiment)." + ' ' + "Once in a while, review the lists below. Click on any title below for details.")), React.createElement(Card_1.Card, null, React.createElement(Card_1.CardTitle, {actAsExpander: true, showExpandableButton: true}, "Dataset Options"), React.createElement(Card_1.CardText, {expandable: true, style: { paddingTop: "0px" }}, React.createElement("p", null, "There are several dataset options available for charts:"), React.createElement("ul", null, React.createElement("li", null, React.createElement("strong", null, "Viewpoint:"), " broad approaches to budget (or actual) data, based on similar" + ' ' + "classification schemes (taxonomies), and data sources."), React.createElement("li", null, React.createElement("strong", null, "Version:"), " alternate detailed datasets available for the selected viewpoint"), React.createElement("li", null, React.createElement("strong", null, "Aspect:"), " particular aspects of the budget, such as Revenue, Expenses or Staffing"), React.createElement("li", null, React.createElement("strong", null, "By Unit:"), " the beginnings of diagnostic analytics, using simple math to view the" + ' ' + "data compared with relevant related metrics, such as per person or per household")), React.createElement("p", null, "Choices for the selections are interdependent. Toronto budgets have similar classifications for" + ' ' + "Revenue and Expenses for example, and therefore these can be viewed together (as offered by the", React.createElement("em", null, "both"), " and ", React.createElement("em", null, "net"), " Aspects). Financial statements" + ' ' + "on the other hand do not have similar classifications for Revenue and Expenses."), React.createElement("p", null, React.createElement("strong", null, React.createElement("em", null, "Viewpoint")), " choices include:"), React.createElement("dl", null, React.createElement("dt", null, React.createElement("strong", null, "Budget (by function)")), React.createElement("dd", null, "combines City of Toronto Agencies and Divisions into groups according to the nature of" + ' ' + "the services delivered (this is the default)"), React.createElement("dt", null, React.createElement("strong", null, "Budget (by structure)")), React.createElement("dd", null, "more traditional: separates Agencies from Divisions, and generally by organizational" + ' ' + "structures. Groupings are closer to those found in City annual Budget Summaries"), React.createElement("dt", null, React.createElement("strong", null, "Financial Statements")), React.createElement("dd", null, "This reporting structure is manadated by the province (and GAAP -- Generally Accepted" + ' ' + "Accounting Principles), is functional, and is comparable to other municipalities in the" + ' ' + "province.")), React.createElement("p", null, "Aspects are the main data series available: Expenditures, Revenues, and Staffing Positions" + ' ' + "(Full Time Equivalents) "), React.createElement("p", null, "This prototype uses data from the City Council Approved Operating Budget Summary 2015 from" + ' ' + "the City of Toronto's open data portal"), React.createElement("p", null, "Click or tap on any column in the \"By Programs\" charts to drill-down. Other charts do not" + ' ' + "currently support drill-down."))), React.createElement(Card_1.Card, null, React.createElement(Card_1.CardTitle, {actAsExpander: true, showExpandableButton: true}, "Chart Options"), React.createElement(Card_1.CardText, {expandable: true, style: { paddingTop: "0px" }}, "chart options content")), React.createElement(Card_1.Card, null, React.createElement(Card_1.CardTitle, {actAsExpander: true, showExpandableButton: true}, "Context Options"), React.createElement(Card_1.CardText, {expandable: true, style: { paddingTop: "0px" }}, "context options content")));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = content;
